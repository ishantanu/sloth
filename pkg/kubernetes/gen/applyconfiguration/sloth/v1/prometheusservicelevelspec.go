// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// PrometheusServiceLevelSpecApplyConfiguration represents a declarative configuration of the PrometheusServiceLevelSpec type for use
// with apply.
type PrometheusServiceLevelSpecApplyConfiguration struct {
	Service    *string                       `json:"service,omitempty"`
	Labels     map[string]string             `json:"labels,omitempty"`
	SLOPlugins *SLOPluginsApplyConfiguration `json:"sloPlugins,omitempty"`
	SLOs       []SLOApplyConfiguration       `json:"slos,omitempty"`
}

// PrometheusServiceLevelSpecApplyConfiguration constructs a declarative configuration of the PrometheusServiceLevelSpec type for use with
// apply.
func PrometheusServiceLevelSpec() *PrometheusServiceLevelSpecApplyConfiguration {
	return &PrometheusServiceLevelSpecApplyConfiguration{}
}

// WithService sets the Service field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Service field is set to the value of the last call.
func (b *PrometheusServiceLevelSpecApplyConfiguration) WithService(value string) *PrometheusServiceLevelSpecApplyConfiguration {
	b.Service = &value
	return b
}

// WithLabels puts the entries into the Labels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Labels field,
// overwriting an existing map entries in Labels field with the same key.
func (b *PrometheusServiceLevelSpecApplyConfiguration) WithLabels(entries map[string]string) *PrometheusServiceLevelSpecApplyConfiguration {
	if b.Labels == nil && len(entries) > 0 {
		b.Labels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Labels[k] = v
	}
	return b
}

// WithSLOPlugins sets the SLOPlugins field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SLOPlugins field is set to the value of the last call.
func (b *PrometheusServiceLevelSpecApplyConfiguration) WithSLOPlugins(value *SLOPluginsApplyConfiguration) *PrometheusServiceLevelSpecApplyConfiguration {
	b.SLOPlugins = value
	return b
}

// WithSLOs adds the given value to the SLOs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the SLOs field.
func (b *PrometheusServiceLevelSpecApplyConfiguration) WithSLOs(values ...*SLOApplyConfiguration) *PrometheusServiceLevelSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithSLOs")
		}
		b.SLOs = append(b.SLOs, *values[i])
	}
	return b
}
