// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// SLOApplyConfiguration represents a declarative configuration of the SLO type for use
// with apply.
type SLOApplyConfiguration struct {
	Name        *string                     `json:"name,omitempty"`
	Description *string                     `json:"description,omitempty"`
	Objective   *float64                    `json:"objective,omitempty"`
	Labels      map[string]string           `json:"labels,omitempty"`
	SLI         *SLIApplyConfiguration      `json:"sli,omitempty"`
	Alerting    *AlertingApplyConfiguration `json:"alerting,omitempty"`
}

// SLOApplyConfiguration constructs a declarative configuration of the SLO type for use with
// apply.
func SLO() *SLOApplyConfiguration {
	return &SLOApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *SLOApplyConfiguration) WithName(value string) *SLOApplyConfiguration {
	b.Name = &value
	return b
}

// WithDescription sets the Description field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Description field is set to the value of the last call.
func (b *SLOApplyConfiguration) WithDescription(value string) *SLOApplyConfiguration {
	b.Description = &value
	return b
}

// WithObjective sets the Objective field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Objective field is set to the value of the last call.
func (b *SLOApplyConfiguration) WithObjective(value float64) *SLOApplyConfiguration {
	b.Objective = &value
	return b
}

// WithLabels puts the entries into the Labels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Labels field,
// overwriting an existing map entries in Labels field with the same key.
func (b *SLOApplyConfiguration) WithLabels(entries map[string]string) *SLOApplyConfiguration {
	if b.Labels == nil && len(entries) > 0 {
		b.Labels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Labels[k] = v
	}
	return b
}

// WithSLI sets the SLI field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SLI field is set to the value of the last call.
func (b *SLOApplyConfiguration) WithSLI(value *SLIApplyConfiguration) *SLOApplyConfiguration {
	b.SLI = value
	return b
}

// WithAlerting sets the Alerting field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Alerting field is set to the value of the last call.
func (b *SLOApplyConfiguration) WithAlerting(value *AlertingApplyConfiguration) *SLOApplyConfiguration {
	b.Alerting = value
	return b
}
