// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// SLIPluginApplyConfiguration represents a declarative configuration of the SLIPlugin type for use
// with apply.
type SLIPluginApplyConfiguration struct {
	ID      *string           `json:"id,omitempty"`
	Options map[string]string `json:"options,omitempty"`
}

// SLIPluginApplyConfiguration constructs a declarative configuration of the SLIPlugin type for use with
// apply.
func SLIPlugin() *SLIPluginApplyConfiguration {
	return &SLIPluginApplyConfiguration{}
}

// WithID sets the ID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ID field is set to the value of the last call.
func (b *SLIPluginApplyConfiguration) WithID(value string) *SLIPluginApplyConfiguration {
	b.ID = &value
	return b
}

// WithOptions puts the entries into the Options field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Options field,
// overwriting an existing map entries in Options field with the same key.
func (b *SLIPluginApplyConfiguration) WithOptions(entries map[string]string) *SLIPluginApplyConfiguration {
	if b.Options == nil && len(entries) > 0 {
		b.Options = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Options[k] = v
	}
	return b
}
