// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// AlertingApplyConfiguration represents a declarative configuration of the Alerting type for use
// with apply.
type AlertingApplyConfiguration struct {
	Name        *string                  `json:"name,omitempty"`
	Labels      map[string]string        `json:"labels,omitempty"`
	Annotations map[string]string        `json:"annotations,omitempty"`
	PageAlert   *AlertApplyConfiguration `json:"pageAlert,omitempty"`
	TicketAlert *AlertApplyConfiguration `json:"ticketAlert,omitempty"`
}

// AlertingApplyConfiguration constructs a declarative configuration of the Alerting type for use with
// apply.
func Alerting() *AlertingApplyConfiguration {
	return &AlertingApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *AlertingApplyConfiguration) WithName(value string) *AlertingApplyConfiguration {
	b.Name = &value
	return b
}

// WithLabels puts the entries into the Labels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Labels field,
// overwriting an existing map entries in Labels field with the same key.
func (b *AlertingApplyConfiguration) WithLabels(entries map[string]string) *AlertingApplyConfiguration {
	if b.Labels == nil && len(entries) > 0 {
		b.Labels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Labels[k] = v
	}
	return b
}

// WithAnnotations puts the entries into the Annotations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Annotations field,
// overwriting an existing map entries in Annotations field with the same key.
func (b *AlertingApplyConfiguration) WithAnnotations(entries map[string]string) *AlertingApplyConfiguration {
	if b.Annotations == nil && len(entries) > 0 {
		b.Annotations = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Annotations[k] = v
	}
	return b
}

// WithPageAlert sets the PageAlert field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PageAlert field is set to the value of the last call.
func (b *AlertingApplyConfiguration) WithPageAlert(value *AlertApplyConfiguration) *AlertingApplyConfiguration {
	b.PageAlert = value
	return b
}

// WithTicketAlert sets the TicketAlert field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TicketAlert field is set to the value of the last call.
func (b *AlertingApplyConfiguration) WithTicketAlert(value *AlertApplyConfiguration) *AlertingApplyConfiguration {
	b.TicketAlert = value
	return b
}
