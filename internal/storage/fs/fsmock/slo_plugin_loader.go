// Code generated by mockery v2.53.3. DO NOT EDIT.

package fsmock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	slo "github.com/slok/sloth/internal/pluginengine/slo"
)

// SLOPluginLoader is an autogenerated mock type for the SLOPluginLoader type
type SLOPluginLoader struct {
	mock.Mock
}

// LoadRawPlugin provides a mock function with given fields: ctx, src
func (_m *SLOPluginLoader) LoadRawPlugin(ctx context.Context, src string) (*slo.Plugin, error) {
	ret := _m.Called(ctx, src)

	if len(ret) == 0 {
		panic("no return value specified for LoadRawPlugin")
	}

	var r0 *slo.Plugin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*slo.Plugin, error)); ok {
		return rf(ctx, src)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *slo.Plugin); ok {
		r0 = rf(ctx, src)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*slo.Plugin)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, src)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSLOPluginLoader creates a new instance of SLOPluginLoader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSLOPluginLoader(t interface {
	mock.TestingT
	Cleanup(func())
}) *SLOPluginLoader {
	mock := &SLOPluginLoader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
