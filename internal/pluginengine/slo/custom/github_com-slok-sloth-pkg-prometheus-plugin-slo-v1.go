// Code generated by 'yaegi extract github.com/slok/sloth/pkg/prometheus/plugin/slo/v1'. DO NOT EDIT.

package custom

import (
	"context"
	"github.com/slok/sloth/pkg/prometheus/plugin/slo/v1"
	"go/constant"
	"go/token"
	"reflect"
)

func init() {
	Symbols["github.com/slok/sloth/pkg/prometheus/plugin/slo/v1/v1"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"PluginFactoryName": reflect.ValueOf(constant.MakeFromLiteral("\"NewPlugin\"", token.STRING, 0)),
		"PluginIDName":      reflect.ValueOf(constant.MakeFromLiteral("\"PluginID\"", token.STRING, 0)),
		"PluginVersionName": reflect.ValueOf(constant.MakeFromLiteral("\"PluginVersion\"", token.STRING, 0)),
		"Version":           reflect.ValueOf(constant.MakeFromLiteral("\"prometheus/slo/v1\"", token.STRING, 0)),

		// type definitions
		"AppUtils":      reflect.ValueOf((*v1.AppUtils)(nil)),
		"Plugin":        reflect.ValueOf((*v1.Plugin)(nil)),
		"PluginFactory": reflect.ValueOf((*v1.PluginFactory)(nil)),
		"PluginID":      reflect.ValueOf((*v1.PluginID)(nil)),
		"PluginVersion": reflect.ValueOf((*v1.PluginVersion)(nil)),
		"Request":       reflect.ValueOf((*v1.Request)(nil)),
		"Result":        reflect.ValueOf((*v1.Result)(nil)),

		// interface wrapper definitions
		"_Plugin": reflect.ValueOf((*_github_com_slok_sloth_pkg_prometheus_plugin_slo_v1_Plugin)(nil)),
	}
}

// _github_com_slok_sloth_pkg_prometheus_plugin_slo_v1_Plugin is an interface wrapper for Plugin type
type _github_com_slok_sloth_pkg_prometheus_plugin_slo_v1_Plugin struct {
	IValue      interface{}
	WProcessSLO func(ctx context.Context, request *v1.Request, result *v1.Result) error
}

func (W _github_com_slok_sloth_pkg_prometheus_plugin_slo_v1_Plugin) ProcessSLO(ctx context.Context, request *v1.Request, result *v1.Result) error {
	return W.WProcessSLO(ctx, request, result)
}
